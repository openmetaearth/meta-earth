// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mechain/meservice/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgDoFixedDeposit struct {
	Account   string           `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Principal types.Coin       `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal"`
	Term      FixedDepositTerm `protobuf:"varint,4,opt,name=term,proto3,enum=mechain.meservice.FixedDepositTerm" json:"term,omitempty"`
}

func (m *MsgDoFixedDeposit) Reset()         { *m = MsgDoFixedDeposit{} }
func (m *MsgDoFixedDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgDoFixedDeposit) ProtoMessage()    {}
func (*MsgDoFixedDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_af7d199cb8f5d433, []int{0}
}
func (m *MsgDoFixedDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDoFixedDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDoFixedDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDoFixedDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDoFixedDeposit.Merge(m, src)
}
func (m *MsgDoFixedDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgDoFixedDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDoFixedDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDoFixedDeposit proto.InternalMessageInfo

func (m *MsgDoFixedDeposit) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MsgDoFixedDeposit) GetPrincipal() types.Coin {
	if m != nil {
		return m.Principal
	}
	return types.Coin{}
}

func (m *MsgDoFixedDeposit) GetTerm() FixedDepositTerm {
	if m != nil {
		return m.Term
	}
	return Term1Month
}

type MsgDoFixedDepositResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDoFixedDepositResponse) Reset()         { *m = MsgDoFixedDepositResponse{} }
func (m *MsgDoFixedDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDoFixedDepositResponse) ProtoMessage()    {}
func (*MsgDoFixedDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_af7d199cb8f5d433, []int{1}
}
func (m *MsgDoFixedDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDoFixedDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDoFixedDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDoFixedDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDoFixedDepositResponse.Merge(m, src)
}
func (m *MsgDoFixedDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDoFixedDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDoFixedDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDoFixedDepositResponse proto.InternalMessageInfo

func (m *MsgDoFixedDepositResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgDoFixedWithdraw struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDoFixedWithdraw) Reset()         { *m = MsgDoFixedWithdraw{} }
func (m *MsgDoFixedWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgDoFixedWithdraw) ProtoMessage()    {}
func (*MsgDoFixedWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_af7d199cb8f5d433, []int{2}
}
func (m *MsgDoFixedWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDoFixedWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDoFixedWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDoFixedWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDoFixedWithdraw.Merge(m, src)
}
func (m *MsgDoFixedWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgDoFixedWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDoFixedWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDoFixedWithdraw proto.InternalMessageInfo

func (m *MsgDoFixedWithdraw) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MsgDoFixedWithdraw) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgDoFixedWithdrawResponse struct {
	Retcode string `protobuf:"bytes,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (m *MsgDoFixedWithdrawResponse) Reset()         { *m = MsgDoFixedWithdrawResponse{} }
func (m *MsgDoFixedWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDoFixedWithdrawResponse) ProtoMessage()    {}
func (*MsgDoFixedWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_af7d199cb8f5d433, []int{3}
}
func (m *MsgDoFixedWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDoFixedWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDoFixedWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDoFixedWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDoFixedWithdrawResponse.Merge(m, src)
}
func (m *MsgDoFixedWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDoFixedWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDoFixedWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDoFixedWithdrawResponse proto.InternalMessageInfo

func (m *MsgDoFixedWithdrawResponse) GetRetcode() string {
	if m != nil {
		return m.Retcode
	}
	return ""
}

type MsgSetFixedDepositInterestRate struct {
	Admin string                                 `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	Term  FixedDepositTerm                       `protobuf:"varint,2,opt,name=term,proto3,enum=mechain.meservice.FixedDepositTerm" json:"term,omitempty"`
	Rate  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate"`
}

func (m *MsgSetFixedDepositInterestRate) Reset()         { *m = MsgSetFixedDepositInterestRate{} }
func (m *MsgSetFixedDepositInterestRate) String() string { return proto.CompactTextString(m) }
func (*MsgSetFixedDepositInterestRate) ProtoMessage()    {}
func (*MsgSetFixedDepositInterestRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_af7d199cb8f5d433, []int{4}
}
func (m *MsgSetFixedDepositInterestRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetFixedDepositInterestRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetFixedDepositInterestRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetFixedDepositInterestRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetFixedDepositInterestRate.Merge(m, src)
}
func (m *MsgSetFixedDepositInterestRate) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetFixedDepositInterestRate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetFixedDepositInterestRate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetFixedDepositInterestRate proto.InternalMessageInfo

func (m *MsgSetFixedDepositInterestRate) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgSetFixedDepositInterestRate) GetTerm() FixedDepositTerm {
	if m != nil {
		return m.Term
	}
	return Term1Month
}

type MsgSetFixedDepositInterestRateResponse struct {
	Retcode string `protobuf:"bytes,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
}

func (m *MsgSetFixedDepositInterestRateResponse) Reset() {
	*m = MsgSetFixedDepositInterestRateResponse{}
}
func (m *MsgSetFixedDepositInterestRateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetFixedDepositInterestRateResponse) ProtoMessage()    {}
func (*MsgSetFixedDepositInterestRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_af7d199cb8f5d433, []int{5}
}
func (m *MsgSetFixedDepositInterestRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetFixedDepositInterestRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetFixedDepositInterestRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetFixedDepositInterestRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetFixedDepositInterestRateResponse.Merge(m, src)
}
func (m *MsgSetFixedDepositInterestRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetFixedDepositInterestRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetFixedDepositInterestRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetFixedDepositInterestRateResponse proto.InternalMessageInfo

func (m *MsgSetFixedDepositInterestRateResponse) GetRetcode() string {
	if m != nil {
		return m.Retcode
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgDoFixedDeposit)(nil), "mechain.meservice.MsgDoFixedDeposit")
	proto.RegisterType((*MsgDoFixedDepositResponse)(nil), "mechain.meservice.MsgDoFixedDepositResponse")
	proto.RegisterType((*MsgDoFixedWithdraw)(nil), "mechain.meservice.MsgDoFixedWithdraw")
	proto.RegisterType((*MsgDoFixedWithdrawResponse)(nil), "mechain.meservice.MsgDoFixedWithdrawResponse")
	proto.RegisterType((*MsgSetFixedDepositInterestRate)(nil), "mechain.meservice.MsgSetFixedDepositInterestRate")
	proto.RegisterType((*MsgSetFixedDepositInterestRateResponse)(nil), "mechain.meservice.MsgSetFixedDepositInterestRateResponse")
}

func init() { proto.RegisterFile("mechain/meservice/tx.proto", fileDescriptor_af7d199cb8f5d433) }

var fileDescriptor_af7d199cb8f5d433 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xba, 0x81, 0xaa, 0x83, 0x14, 0x54, 0xab, 0x07, 0xd7, 0x48, 0x6e, 0x64, 0x68, 0x15,
	0x09, 0xb2, 0x56, 0x02, 0x02, 0x71, 0x80, 0x83, 0x89, 0x90, 0x38, 0xe4, 0x62, 0x90, 0x90, 0xb8,
	0x20, 0x67, 0x3d, 0x38, 0x2b, 0xb0, 0xd7, 0xda, 0xdd, 0x96, 0xf0, 0x0c, 0x5c, 0x78, 0x09, 0x9e,
	0x80, 0x97, 0xe8, 0xb1, 0x47, 0xc4, 0xa1, 0x42, 0xc9, 0x8b, 0x20, 0xff, 0xc4, 0x8d, 0xea, 0xca,
	0xb4, 0x27, 0x7b, 0xf4, 0x7d, 0xdf, 0xcc, 0x37, 0x33, 0xbb, 0x0b, 0x76, 0x82, 0x6c, 0x1e, 0xf2,
	0xd4, 0x4b, 0x50, 0xa1, 0x3c, 0xe1, 0x0c, 0x3d, 0xbd, 0xa0, 0x99, 0x14, 0x5a, 0x98, 0xbb, 0x15,
	0x46, 0x6b, 0xcc, 0xde, 0x8b, 0x45, 0x2c, 0x0a, 0xd4, 0xcb, 0xff, 0x4a, 0xa2, 0xed, 0x30, 0xa1,
	0x12, 0xa1, 0xbc, 0x59, 0xa8, 0xd0, 0x3b, 0x19, 0xcd, 0x50, 0x87, 0x23, 0x8f, 0x09, 0x9e, 0x56,
	0xf8, 0x61, 0xb3, 0xc8, 0x27, 0xbe, 0xc0, 0xe8, 0x63, 0x84, 0x99, 0x50, 0x5c, 0x97, 0x34, 0xf7,
	0x27, 0x81, 0xdd, 0xa9, 0x8a, 0x27, 0xe2, 0x75, 0x0e, 0x4e, 0x4a, 0xcc, 0xb4, 0x60, 0x3b, 0x64,
	0x4c, 0x1c, 0xa7, 0xda, 0x22, 0x7d, 0x32, 0xd8, 0x09, 0xd6, 0xa1, 0xf9, 0x02, 0x76, 0x32, 0xc9,
	0x53, 0xc6, 0xb3, 0xf0, 0x8b, 0x65, 0xf4, 0xc9, 0xe0, 0xce, 0x78, 0x9f, 0x96, 0x56, 0x68, 0x6e,
	0x85, 0x56, 0x56, 0xe8, 0x2b, 0xc1, 0x53, 0xbf, 0x7b, 0x7a, 0x7e, 0xd0, 0x09, 0x2e, 0x14, 0xe6,
	0x33, 0xe8, 0x6a, 0x94, 0x89, 0xd5, 0xed, 0x93, 0x41, 0x6f, 0x7c, 0x9f, 0x36, 0xba, 0xa5, 0x9b,
	0x3e, 0xde, 0xa1, 0x4c, 0x82, 0x42, 0xe0, 0x3e, 0x84, 0xfd, 0x86, 0xcd, 0x00, 0x55, 0x26, 0x52,
	0x85, 0x66, 0x0f, 0x0c, 0x1e, 0x15, 0x4e, 0xbb, 0x81, 0xc1, 0x23, 0xf7, 0x25, 0x98, 0x17, 0xe4,
	0xf7, 0x5c, 0xcf, 0x23, 0x19, 0x7e, 0x6d, 0x69, 0xaa, 0xd4, 0x1b, 0xb5, 0xfe, 0x29, 0xd8, 0x4d,
	0x7d, 0x5d, 0xcd, 0x82, 0x6d, 0x89, 0x9a, 0x89, 0x08, 0xd7, 0x79, 0xaa, 0xd0, 0xfd, 0x45, 0xc0,
	0x99, 0xaa, 0xf8, 0x2d, 0xea, 0x4d, 0x9b, 0x6f, 0x52, 0x8d, 0x12, 0x95, 0x0e, 0x42, 0x8d, 0xe6,
	0x1e, 0xdc, 0x0a, 0xa3, 0x84, 0xa7, 0x95, 0xb4, 0x0c, 0xea, 0xb1, 0x18, 0x37, 0x1c, 0x8b, 0xe9,
	0x43, 0x57, 0x86, 0x1a, 0xad, 0xad, 0x3c, 0x9b, 0x4f, 0xf3, 0x71, 0xff, 0x39, 0x3f, 0x38, 0x8a,
	0xb9, 0x9e, 0x1f, 0xcf, 0x28, 0x13, 0x89, 0x57, 0x1d, 0x93, 0xf2, 0x33, 0x54, 0xd1, 0x67, 0x4f,
	0x7f, 0xcb, 0x50, 0xd1, 0x09, 0xb2, 0xa0, 0xd0, 0xba, 0x3e, 0x1c, 0xb5, 0x9b, 0xfe, 0x7f, 0xe7,
	0xe3, 0xa5, 0x01, 0x5b, 0x53, 0x15, 0x9b, 0x11, 0xf4, 0x2e, 0x1d, 0xa5, 0x07, 0x57, 0x34, 0xd3,
	0xd8, 0xa4, 0xfd, 0xe8, 0x3a, 0xac, 0xda, 0x47, 0x0c, 0x77, 0x2f, 0x2f, 0xf7, 0xb0, 0x35, 0xc1,
	0x9a, 0x66, 0x0f, 0xaf, 0x45, 0xab, 0x0b, 0x7d, 0x27, 0x70, 0xaf, 0x6d, 0x9b, 0xa3, 0xab, 0xd3,
	0xb5, 0x48, 0xec, 0xe7, 0x37, 0x96, 0xac, 0xdd, 0xf8, 0x4f, 0x4e, 0x97, 0x0e, 0x39, 0x5b, 0x3a,
	0xe4, 0xef, 0xd2, 0x21, 0x3f, 0x56, 0x4e, 0xe7, 0x6c, 0xe5, 0x74, 0x7e, 0xaf, 0x9c, 0xce, 0x07,
	0x3b, 0xc1, 0x61, 0x79, 0xdb, 0x17, 0x9b, 0x8f, 0x4a, 0xbe, 0xe8, 0xd9, 0xed, 0xe2, 0xa2, 0x3f,
	0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x01, 0x40, 0x61, 0x76, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	DoFixedDeposit(ctx context.Context, in *MsgDoFixedDeposit, opts ...grpc.CallOption) (*MsgDoFixedDepositResponse, error)
	DoFixedWithdraw(ctx context.Context, in *MsgDoFixedWithdraw, opts ...grpc.CallOption) (*MsgDoFixedWithdrawResponse, error)
	SetFixedDepositInterestRate(ctx context.Context, in *MsgSetFixedDepositInterestRate, opts ...grpc.CallOption) (*MsgSetFixedDepositInterestRateResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DoFixedDeposit(ctx context.Context, in *MsgDoFixedDeposit, opts ...grpc.CallOption) (*MsgDoFixedDepositResponse, error) {
	out := new(MsgDoFixedDepositResponse)
	err := c.cc.Invoke(ctx, "/mechain.meservice.Msg/DoFixedDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DoFixedWithdraw(ctx context.Context, in *MsgDoFixedWithdraw, opts ...grpc.CallOption) (*MsgDoFixedWithdrawResponse, error) {
	out := new(MsgDoFixedWithdrawResponse)
	err := c.cc.Invoke(ctx, "/mechain.meservice.Msg/DoFixedWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetFixedDepositInterestRate(ctx context.Context, in *MsgSetFixedDepositInterestRate, opts ...grpc.CallOption) (*MsgSetFixedDepositInterestRateResponse, error) {
	out := new(MsgSetFixedDepositInterestRateResponse)
	err := c.cc.Invoke(ctx, "/mechain.meservice.Msg/SetFixedDepositInterestRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	DoFixedDeposit(context.Context, *MsgDoFixedDeposit) (*MsgDoFixedDepositResponse, error)
	DoFixedWithdraw(context.Context, *MsgDoFixedWithdraw) (*MsgDoFixedWithdrawResponse, error)
	SetFixedDepositInterestRate(context.Context, *MsgSetFixedDepositInterestRate) (*MsgSetFixedDepositInterestRateResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DoFixedDeposit(ctx context.Context, req *MsgDoFixedDeposit) (*MsgDoFixedDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoFixedDeposit not implemented")
}
func (*UnimplementedMsgServer) DoFixedWithdraw(ctx context.Context, req *MsgDoFixedWithdraw) (*MsgDoFixedWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoFixedWithdraw not implemented")
}
func (*UnimplementedMsgServer) SetFixedDepositInterestRate(ctx context.Context, req *MsgSetFixedDepositInterestRate) (*MsgSetFixedDepositInterestRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFixedDepositInterestRate not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DoFixedDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDoFixedDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DoFixedDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mechain.meservice.Msg/DoFixedDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DoFixedDeposit(ctx, req.(*MsgDoFixedDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DoFixedWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDoFixedWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DoFixedWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mechain.meservice.Msg/DoFixedWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DoFixedWithdraw(ctx, req.(*MsgDoFixedWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetFixedDepositInterestRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetFixedDepositInterestRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetFixedDepositInterestRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mechain.meservice.Msg/SetFixedDepositInterestRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetFixedDepositInterestRate(ctx, req.(*MsgSetFixedDepositInterestRate))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mechain.meservice.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoFixedDeposit",
			Handler:    _Msg_DoFixedDeposit_Handler,
		},
		{
			MethodName: "DoFixedWithdraw",
			Handler:    _Msg_DoFixedWithdraw_Handler,
		},
		{
			MethodName: "SetFixedDepositInterestRate",
			Handler:    _Msg_SetFixedDepositInterestRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mechain/meservice/tx.proto",
}

func (m *MsgDoFixedDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDoFixedDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDoFixedDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Term != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Principal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDoFixedDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDoFixedDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDoFixedDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDoFixedWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDoFixedWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDoFixedWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDoFixedWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDoFixedWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDoFixedWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Retcode) > 0 {
		i -= len(m.Retcode)
		copy(dAtA[i:], m.Retcode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Retcode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetFixedDepositInterestRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetFixedDepositInterestRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetFixedDepositInterestRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Term != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetFixedDepositInterestRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetFixedDepositInterestRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetFixedDepositInterestRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Retcode) > 0 {
		i -= len(m.Retcode)
		copy(dAtA[i:], m.Retcode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Retcode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDoFixedDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Principal.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Term != 0 {
		n += 1 + sovTx(uint64(m.Term))
	}
	return n
}

func (m *MsgDoFixedDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgDoFixedWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgDoFixedWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Retcode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetFixedDepositInterestRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovTx(uint64(m.Term))
	}
	l = m.Rate.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetFixedDepositInterestRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Retcode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDoFixedDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDoFixedDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDoFixedDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Principal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= FixedDepositTerm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDoFixedDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDoFixedDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDoFixedDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDoFixedWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDoFixedWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDoFixedWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDoFixedWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDoFixedWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDoFixedWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Retcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetFixedDepositInterestRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetFixedDepositInterestRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetFixedDepositInterestRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= FixedDepositTerm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetFixedDepositInterestRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetFixedDepositInterestRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetFixedDepositInterestRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Retcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
