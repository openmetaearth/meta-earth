// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mechain/meservice/fixed_deposit.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FixedDepositTerm int32

const (
	Term1Month  FixedDepositTerm = 0
	Term3Month  FixedDepositTerm = 1
	Term6Month  FixedDepositTerm = 2
	Term12Month FixedDepositTerm = 3
	Term24Month FixedDepositTerm = 4
	Term48Month FixedDepositTerm = 5
)

var FixedDepositTerm_name = map[int32]string{
	0: "Term_1_MONTHS",
	1: "Term_3_MONTHS",
	2: "Term_6_MONTHS",
	3: "Term_12_MONTHS",
	4: "Term_24_MONTHS",
	5: "Term_48_MONTHS",
}

var FixedDepositTerm_value = map[string]int32{
	"Term_1_MONTHS":  0,
	"Term_3_MONTHS":  1,
	"Term_6_MONTHS":  2,
	"Term_12_MONTHS": 3,
	"Term_24_MONTHS": 4,
	"Term_48_MONTHS": 5,
}

func (x FixedDepositTerm) String() string {
	return proto.EnumName(FixedDepositTerm_name, int32(x))
}

func (FixedDepositTerm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_90815b97ee55b4f8, []int{0}
}

type FixedDepositQueryType int32

const (
	QueryAll        FixedDepositQueryType = 0
	QueryNotExpired FixedDepositQueryType = 1
	QueryExpired    FixedDepositQueryType = 2
)

var FixedDepositQueryType_name = map[int32]string{
	0: "QUERY_ALL",
	1: "QUERY_NOT_EXPIRED",
	2: "QUERY_EXPIRED",
}

var FixedDepositQueryType_value = map[string]int32{
	"QUERY_ALL":         0,
	"QUERY_NOT_EXPIRED": 1,
	"QUERY_EXPIRED":     2,
}

func (x FixedDepositQueryType) String() string {
	return proto.EnumName(FixedDepositQueryType_name, int32(x))
}

func (FixedDepositQueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_90815b97ee55b4f8, []int{1}
}

type FixedDepositAnnualRate struct {
	AnnualRate_1Months  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=annualRate_1_months,json=annualRate1Months,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"annualRate_1_months"`
	AnnualRate_3Months  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=annualRate_3_months,json=annualRate3Months,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"annualRate_3_months"`
	AnnualRate_6Months  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=annualRate_6_months,json=annualRate6Months,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"annualRate_6_months"`
	AnnualRate_12Months github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=annualRate_12_months,json=annualRate12Months,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"annualRate_12_months"`
	AnnualRate_24Months github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=annualRate_24_months,json=annualRate24Months,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"annualRate_24_months"`
	AnnualRate_48Months github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=annualRate_48_months,json=annualRate48Months,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"annualRate_48_months"`
}

func (m *FixedDepositAnnualRate) Reset()         { *m = FixedDepositAnnualRate{} }
func (m *FixedDepositAnnualRate) String() string { return proto.CompactTextString(m) }
func (*FixedDepositAnnualRate) ProtoMessage()    {}
func (*FixedDepositAnnualRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_90815b97ee55b4f8, []int{0}
}
func (m *FixedDepositAnnualRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixedDepositAnnualRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FixedDepositAnnualRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FixedDepositAnnualRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedDepositAnnualRate.Merge(m, src)
}
func (m *FixedDepositAnnualRate) XXX_Size() int {
	return m.Size()
}
func (m *FixedDepositAnnualRate) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedDepositAnnualRate.DiscardUnknown(m)
}

var xxx_messageInfo_FixedDepositAnnualRate proto.InternalMessageInfo

type FixedDepositVault struct {
	Account string                  `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Rate    *FixedDepositAnnualRate `protobuf:"bytes,2,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *FixedDepositVault) Reset()         { *m = FixedDepositVault{} }
func (m *FixedDepositVault) String() string { return proto.CompactTextString(m) }
func (*FixedDepositVault) ProtoMessage()    {}
func (*FixedDepositVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_90815b97ee55b4f8, []int{1}
}
func (m *FixedDepositVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixedDepositVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FixedDepositVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FixedDepositVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedDepositVault.Merge(m, src)
}
func (m *FixedDepositVault) XXX_Size() int {
	return m.Size()
}
func (m *FixedDepositVault) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedDepositVault.DiscardUnknown(m)
}

var xxx_messageInfo_FixedDepositVault proto.InternalMessageInfo

func (m *FixedDepositVault) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *FixedDepositVault) GetRate() *FixedDepositAnnualRate {
	if m != nil {
		return m.Rate
	}
	return nil
}

type FixedDeposit struct {
	Id        uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Account   string     `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Principal types.Coin `protobuf:"bytes,3,opt,name=principal,proto3" json:"principal"`
	Interest  types.Coin `protobuf:"bytes,4,opt,name=interest,proto3" json:"interest"`
	StartTime time.Time  `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime   time.Time  `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
}

func (m *FixedDeposit) Reset()         { *m = FixedDeposit{} }
func (m *FixedDeposit) String() string { return proto.CompactTextString(m) }
func (*FixedDeposit) ProtoMessage()    {}
func (*FixedDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_90815b97ee55b4f8, []int{2}
}
func (m *FixedDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixedDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FixedDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FixedDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedDeposit.Merge(m, src)
}
func (m *FixedDeposit) XXX_Size() int {
	return m.Size()
}
func (m *FixedDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_FixedDeposit proto.InternalMessageInfo

func (m *FixedDeposit) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FixedDeposit) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *FixedDeposit) GetPrincipal() types.Coin {
	if m != nil {
		return m.Principal
	}
	return types.Coin{}
}

func (m *FixedDeposit) GetInterest() types.Coin {
	if m != nil {
		return m.Interest
	}
	return types.Coin{}
}

func (m *FixedDeposit) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *FixedDeposit) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("mechain.meservice.FixedDepositTerm", FixedDepositTerm_name, FixedDepositTerm_value)
	proto.RegisterEnum("mechain.meservice.FixedDepositQueryType", FixedDepositQueryType_name, FixedDepositQueryType_value)
	proto.RegisterType((*FixedDepositAnnualRate)(nil), "mechain.meservice.FixedDepositAnnualRate")
	proto.RegisterType((*FixedDepositVault)(nil), "mechain.meservice.FixedDepositVault")
	proto.RegisterType((*FixedDeposit)(nil), "mechain.meservice.FixedDeposit")
}

func init() {
	proto.RegisterFile("mechain/meservice/fixed_deposit.proto", fileDescriptor_90815b97ee55b4f8)
}

var fileDescriptor_90815b97ee55b4f8 = []byte{
	// 719 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xcf, 0x6e, 0xd3, 0x4a,
	0x14, 0xc6, 0xe3, 0x34, 0x6d, 0x93, 0x49, 0xff, 0x24, 0x6e, 0xef, 0x55, 0xaf, 0xaf, 0xe4, 0xe4,
	0xb6, 0xba, 0x08, 0x2a, 0x75, 0xac, 0x38, 0x51, 0x55, 0x09, 0x21, 0xd4, 0xb4, 0x41, 0x20, 0xf5,
	0x0f, 0x35, 0x01, 0x01, 0x0b, 0x8c, 0x63, 0x4f, 0xd3, 0x11, 0xb1, 0xc7, 0xb2, 0x27, 0x55, 0xfb,
	0x06, 0x28, 0x6c, 0xfa, 0x02, 0x59, 0xf1, 0x16, 0x3c, 0x41, 0x97, 0x5d, 0x22, 0x16, 0x05, 0xb5,
	0x2f, 0xc0, 0x23, 0x20, 0xcf, 0x78, 0x12, 0xb7, 0x64, 0x01, 0x64, 0x65, 0x8f, 0xcf, 0xef, 0x7c,
	0xdf, 0x78, 0x7c, 0x3e, 0x19, 0xfc, 0xef, 0x22, 0xfb, 0xc8, 0xc2, 0x9e, 0xe6, 0xa2, 0x10, 0x05,
	0xc7, 0xd8, 0x46, 0xda, 0x21, 0x3e, 0x41, 0x8e, 0xe9, 0x20, 0x9f, 0x84, 0x98, 0x42, 0x3f, 0x20,
	0x94, 0xc8, 0xc5, 0x18, 0x83, 0x03, 0x4c, 0x59, 0x6c, 0x93, 0x36, 0x61, 0x55, 0x2d, 0xba, 0xe3,
	0xa0, 0xa2, 0xb6, 0x09, 0x69, 0x77, 0x90, 0xc6, 0x56, 0xad, 0xee, 0xa1, 0xe6, 0x74, 0x03, 0x8b,
	0x62, 0xe2, 0xc5, 0xf5, 0xd2, 0xed, 0x3a, 0xc5, 0x2e, 0x0a, 0xa9, 0xe5, 0xfa, 0x42, 0xc0, 0x26,
	0xa1, 0x4b, 0x42, 0xad, 0x65, 0x85, 0x48, 0x3b, 0xae, 0xb4, 0x10, 0xb5, 0x2a, 0x9a, 0x4d, 0x70,
	0x2c, 0xb0, 0x7c, 0x99, 0x01, 0x7f, 0x3f, 0x8a, 0x76, 0xb8, 0xcd, 0x37, 0xb8, 0xe9, 0x79, 0x5d,
	0xab, 0x63, 0x58, 0x14, 0xc9, 0x6f, 0xc0, 0x82, 0x35, 0x58, 0x99, 0x15, 0xd3, 0x25, 0x1e, 0x3d,
	0x0a, 0x97, 0xa4, 0xb2, 0x74, 0x37, 0x57, 0x87, 0xe7, 0x97, 0xa5, 0xd4, 0x97, 0xcb, 0xd2, 0x9d,
	0x36, 0xa6, 0x47, 0xdd, 0x16, 0xb4, 0x89, 0xab, 0xc5, 0x56, 0xfc, 0xb2, 0x16, 0x3a, 0xef, 0x34,
	0x7a, 0xea, 0xa3, 0x10, 0x6e, 0x23, 0xdb, 0x28, 0x0e, 0xa5, 0x2a, 0xbb, 0x4c, 0xe8, 0x96, 0x7e,
	0x55, 0xe8, 0xa7, 0xc7, 0xd5, 0xaf, 0x8e, 0xd4, 0x5f, 0x17, 0xfa, 0x13, 0xe3, 0xea, 0xaf, 0xc7,
	0xfa, 0x6f, 0xc1, 0x62, 0xf2, 0x7c, 0x74, 0x61, 0x90, 0xf9, 0x23, 0x03, 0x39, 0x71, 0x40, 0xfa,
	0x48, 0x07, 0xbd, 0x26, 0x1c, 0x26, 0xc7, 0x75, 0xd0, 0x6b, 0x23, 0x1d, 0x6a, 0x1b, 0xc2, 0x61,
	0x6a, 0x5c, 0x87, 0xda, 0x06, 0x77, 0x58, 0xee, 0x80, 0x62, 0x72, 0xbe, 0x5e, 0x58, 0xdd, 0x0e,
	0x95, 0x97, 0xc0, 0xb4, 0x65, 0xdb, 0xa4, 0xeb, 0x51, 0x3e, 0x4e, 0x86, 0x58, 0xca, 0x0f, 0x40,
	0x26, 0xb0, 0x28, 0x62, 0x53, 0x90, 0xd7, 0xef, 0xc1, 0x9f, 0x82, 0x02, 0x47, 0x4f, 0xab, 0xc1,
	0xda, 0x96, 0x3f, 0xa5, 0xc1, 0x4c, 0x12, 0x90, 0xe7, 0x40, 0x1a, 0x3b, 0xcc, 0x24, 0x63, 0xa4,
	0xb1, 0x93, 0x74, 0x4e, 0xdf, 0x76, 0xce, 0xf9, 0x01, 0xf6, 0x6c, 0xec, 0x5b, 0x1d, 0x36, 0x24,
	0x79, 0xfd, 0x1f, 0xc8, 0x5f, 0x13, 0x46, 0xe9, 0x81, 0x71, 0x7a, 0xe0, 0x16, 0xc1, 0x5e, 0x3d,
	0x13, 0x1d, 0x8d, 0x31, 0xec, 0x90, 0xef, 0x83, 0x2c, 0xf6, 0x28, 0x0a, 0x50, 0x48, 0xd9, 0x04,
	0xfc, 0x42, 0xf7, 0xa0, 0x41, 0xde, 0x02, 0x20, 0xa4, 0x56, 0x40, 0xcd, 0x28, 0xbe, 0xec, 0xf3,
	0xe6, 0x75, 0x05, 0xf2, 0x6c, 0x43, 0x91, 0x6d, 0xd8, 0x14, 0xd9, 0xae, 0x67, 0xa3, 0xfe, 0xb3,
	0xaf, 0x25, 0xc9, 0xc8, 0xb1, 0xbe, 0xa8, 0x22, 0x3f, 0x04, 0x59, 0xe4, 0x39, 0x5c, 0x62, 0xea,
	0x37, 0x24, 0xa6, 0x91, 0xe7, 0x44, 0xcf, 0x57, 0xbf, 0x4b, 0xa0, 0x90, 0x3c, 0xbc, 0x26, 0x0a,
	0x5c, 0xf9, 0x3f, 0x30, 0x1b, 0x5d, 0xcd, 0x8a, 0xb9, 0xbb, 0xbf, 0xd7, 0x7c, 0xfc, 0xac, 0x90,
	0x52, 0xe6, 0x7a, 0xfd, 0x32, 0x88, 0x1e, 0xf2, 0x24, 0x0f, 0x90, 0xaa, 0x40, 0xa4, 0x21, 0x52,
	0xbd, 0x89, 0xac, 0x0b, 0x24, 0x3d, 0x44, 0x78, 0x9e, 0xe4, 0x15, 0x30, 0xc7, 0x8d, 0x74, 0xc1,
	0x4c, 0x28, 0xf3, 0xbd, 0x7e, 0x39, 0xcf, 0x9c, 0xf4, 0x9b, 0x90, 0x5e, 0x13, 0x50, 0x66, 0x08,
	0xc5, 0x53, 0x3d, 0x80, 0x6a, 0x1b, 0x02, 0x9a, 0x1c, 0x42, 0xf1, 0x60, 0x2a, 0x99, 0xf7, 0x1f,
	0xd5, 0xd4, 0xea, 0x07, 0x09, 0xfc, 0x95, 0x7c, 0xe5, 0x83, 0x2e, 0x0a, 0x4e, 0x9b, 0xa7, 0x3e,
	0x92, 0xff, 0x05, 0xb9, 0x83, 0xe7, 0x0d, 0xe3, 0x95, 0xb9, 0xb9, 0xb3, 0x53, 0x48, 0x29, 0x33,
	0xbd, 0x7e, 0x39, 0xcb, 0xaa, 0x9b, 0x9d, 0x8e, 0xbc, 0x0a, 0x8a, 0xbc, 0xb8, 0xb7, 0xdf, 0x34,
	0x1b, 0x2f, 0x9f, 0x3e, 0x31, 0x1a, 0xdb, 0x05, 0x49, 0x59, 0xe8, 0xf5, 0xcb, 0xf3, 0x0c, 0xda,
	0x23, 0xb4, 0x71, 0xe2, 0xe3, 0x00, 0x39, 0xf2, 0x0a, 0x98, 0xe5, 0xac, 0xe0, 0xd2, 0x4a, 0xa1,
	0xd7, 0x2f, 0xcf, 0x30, 0x2e, 0x86, 0xf8, 0x6e, 0xea, 0xb5, 0xf3, 0x2b, 0x55, 0xba, 0xb8, 0x52,
	0xa5, 0x6f, 0x57, 0xaa, 0x74, 0x76, 0xad, 0xa6, 0x2e, 0xae, 0xd5, 0xd4, 0xe7, 0x6b, 0x35, 0xf5,
	0x5a, 0x71, 0xd1, 0x1a, 0xff, 0xb1, 0x9c, 0x24, 0x7e, 0x2d, 0x2c, 0x79, 0xad, 0x29, 0xf6, 0x75,
	0xab, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x13, 0xd9, 0x73, 0x7c, 0x06, 0x00, 0x00,
}

func (m *FixedDepositAnnualRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedDepositAnnualRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixedDepositAnnualRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AnnualRate_48Months.Size()
		i -= size
		if _, err := m.AnnualRate_48Months.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFixedDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.AnnualRate_24Months.Size()
		i -= size
		if _, err := m.AnnualRate_24Months.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFixedDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.AnnualRate_12Months.Size()
		i -= size
		if _, err := m.AnnualRate_12Months.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFixedDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.AnnualRate_6Months.Size()
		i -= size
		if _, err := m.AnnualRate_6Months.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFixedDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.AnnualRate_3Months.Size()
		i -= size
		if _, err := m.AnnualRate_3Months.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFixedDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.AnnualRate_1Months.Size()
		i -= size
		if _, err := m.AnnualRate_1Months.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFixedDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FixedDepositVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedDepositVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixedDepositVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rate != nil {
		{
			size, err := m.Rate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFixedDeposit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintFixedDeposit(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FixedDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixedDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintFixedDeposit(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintFixedDeposit(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Interest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFixedDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Principal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFixedDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintFixedDeposit(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintFixedDeposit(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFixedDeposit(dAtA []byte, offset int, v uint64) int {
	offset -= sovFixedDeposit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FixedDepositAnnualRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AnnualRate_1Months.Size()
	n += 1 + l + sovFixedDeposit(uint64(l))
	l = m.AnnualRate_3Months.Size()
	n += 1 + l + sovFixedDeposit(uint64(l))
	l = m.AnnualRate_6Months.Size()
	n += 1 + l + sovFixedDeposit(uint64(l))
	l = m.AnnualRate_12Months.Size()
	n += 1 + l + sovFixedDeposit(uint64(l))
	l = m.AnnualRate_24Months.Size()
	n += 1 + l + sovFixedDeposit(uint64(l))
	l = m.AnnualRate_48Months.Size()
	n += 1 + l + sovFixedDeposit(uint64(l))
	return n
}

func (m *FixedDepositVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovFixedDeposit(uint64(l))
	}
	if m.Rate != nil {
		l = m.Rate.Size()
		n += 1 + l + sovFixedDeposit(uint64(l))
	}
	return n
}

func (m *FixedDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFixedDeposit(uint64(m.Id))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovFixedDeposit(uint64(l))
	}
	l = m.Principal.Size()
	n += 1 + l + sovFixedDeposit(uint64(l))
	l = m.Interest.Size()
	n += 1 + l + sovFixedDeposit(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovFixedDeposit(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovFixedDeposit(uint64(l))
	return n
}

func sovFixedDeposit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFixedDeposit(x uint64) (n int) {
	return sovFixedDeposit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FixedDepositAnnualRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFixedDeposit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedDepositAnnualRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedDepositAnnualRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualRate_1Months", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnnualRate_1Months.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualRate_3Months", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnnualRate_3Months.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualRate_6Months", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnnualRate_6Months.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualRate_12Months", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnnualRate_12Months.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualRate_24Months", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnnualRate_24Months.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualRate_48Months", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnnualRate_48Months.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFixedDeposit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixedDepositVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFixedDeposit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedDepositVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedDepositVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rate == nil {
				m.Rate = &FixedDepositAnnualRate{}
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFixedDeposit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixedDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFixedDeposit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Principal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFixedDeposit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFixedDeposit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFixedDeposit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFixedDeposit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFixedDeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFixedDeposit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFixedDeposit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFixedDeposit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFixedDeposit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFixedDeposit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFixedDeposit = fmt.Errorf("proto: unexpected end of group")
)
